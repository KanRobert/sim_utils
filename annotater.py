#!/usr/bin/env python3
import re, argparse, json

# Regex for the line of instruction:
# 1: 48 89 e5  movq %rsp, %rbp
inst_regex = re.compile(r'\s*([0-9a-f]+):\s+(?:[0-9a-f]{2}(?:\s|$))+(.*)')

def ratio_number(k, n):
    return '{:.2f}%'.format(k / n * 100)

def annotate(disasm_file, profile_file):
    with open(disasm_file, 'r') as disasm, open(profile_file, 'r') as profile, open(disasm_file + '.annotated', 'w') as annotated:
        json_data = json.load(profile)
        global_icount = int(json_data['global'][0]['total'])
        insn_count = json_data['insn']
        icounts = {pc_execution['pc']: int(pc_execution['execution']) for pc_execution in insn_count}
        print('Total dynamic icount: ' + format(global_icount, ','), file=annotated)
        for line in disasm:
            line = line.rstrip()
            if matches := inst_regex.match(line):
                pc = matches.group(1).lstrip('0')
                execution = icounts[pc] if pc in icounts else 0
                if execution:
                    line += ' | ' + format(execution, ',') + '({})'.format(ratio_number(execution, global_icount))
            print(line, file=annotated)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Annotate disam with icount info.')
    parser.add_argument('disasm', help='disasm file generated by [llvm-]objdump')
    parser.add_argument('profile', help='SDE profile data of JSON format')
    args = parser.parse_args()
    annotate(args.disasm, args.profile)
